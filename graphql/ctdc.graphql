type arm {
  arm_id: String
  arm_title: String
  arm_target: String
  arm_drug: String
  pubmed_id: String
  dbgap_accession_number: String
  assignment_reports: [assignment_report] @relation(name:"of_arm", direction:IN)
  cases: [case] @relation(name:"of_arm", direction:IN)
  files: [file] @relation(name:"of_arm", direction:IN)
  disease_eligibility_criterions: [disease_eligibility_criterion] @relation(name:"of_arm", direction:IN)
  drug_eligibility_criterions: [drug_eligibility_criterion] @relation(name:"of_arm", direction:IN)
  clinical_trial: clinical_trial @relation(name:"of_trial", direction:OUT)
}

type assignment_report {
  assignment_report_id: String
  step_at_assignment: Int
  assignment_logic: String
  assignment_outcome: String
  treatment_outcome: String
  specimen: specimen @relation(name:"of_specimen", direction:OUT)
  variant_report: variant_report @relation(name:"of_variant_report", direction:OUT)
  arms: [arm] @relation(name:"of_arm", direction:OUT)
}

type case {
  case_id: String
  gender: String
  race: String
  ethnicity: String
  patient_status: String
  current_step: Int
  disease: String
  ctep_category: String
  ctep_subcategory: String
  meddra_code: String
  prior_drugs: String
  extent_of_disease: String
  ecog_performance_status: Int
  specimens: [specimen] @relation(name:"of_case", direction:IN)
  arms: [arm] @relation(name:"of_arm", direction:OUT)
  metastatic_sites: [metastatic_site] @relation(name:"met_site_of", direction:IN)
}

type clinical_trial {
  clinical_trial_id: String
  clinical_trial_short_name: String
  clinical_trial_description: String
  clinical_trial_designation: String
  clinical_trial_long_name: String
  clinical_trial_type: String
  lead_organization: String
  principal_investigators: String
  dbgap_accession_number: String
  arms: [arm] @relation(name:"of_trial", direction:IN)
}

type copy_number_variant {
  variant_id: String
  external_variant_id: String
  gene: String
  chromosome: String
  oncomine_variant_class: String
  tumor_suppressor: Boolean
  variant_reports: [variant_report] @relation(name:"copy_number_variant_of", direction:OUT)
}

type copy_number_variant_of {
  copy_number: Float
  copy_number_ci_5: Float
  copy_number_ci_95: Float
}

type delins_variant {
  variant_id: String
  external_variant_id: String
  gene: String
  chromosome: String
  exon: Int
  position: Int
  reference: String
  alternative: String
  transcript_id: String
  transcript_hgvs: String
  genomic_hgvs: String
  oncomine_variant_class: String
  variant_classification: String
  amino_acid_change: String
  variant_reports: [variant_report] @relation(name:"delins_variant_of", direction:OUT)
}

type delins_variant_of {
  allele_frequency: Float
}

type disease_eligibility_criterion {
  disease_eligibility_criterion_id: String
  criterion_type: String
  ctep_category: String
  ctep_subcategory: String
  ctep_short_name: String
  meddra_code: String
  arms: [arm] @relation(name:"of_arm", direction:OUT)
}

type drug_eligibility_criterion {
  drug_eligibility_criterion_id: String
  criterion_type: String
  drug_name: String
  arms: [arm] @relation(name:"of_arm", direction:OUT)
}

type file {
  file_description: String
  file_format: String
  file_location: String
  file_name: String
  file_size: Float
  file_status: String
  file_type: String
  md5sum: String
  uuid: String
  sequencing_assay: sequencing_assay @relation(name:"of_sequencing_assay", direction:OUT)
  arms: [arm] @relation(name:"of_arm", direction:OUT)
}

type gene_fusion_variant {
  variant_id: String
  external_variant_id: String
  gene1: String
  gene2: String
  oncomine_variant_class: String
  variant_reports: [variant_report] @relation(name:"gene_fusion_variant_of", direction:OUT)
}

type gene_fusion_variant_of {
  gene1_read_count: Int
  gene2_read_count: Int
}

type ihc_assay_report {
  ihc_assay_id: String
  ihc_test_gene: String
  ihc_test_result: String
  specimen: specimen @relation(name:"of_specimen", direction:OUT)
}

type indel_variant {
  variant_id: String
  external_variant_id: String
  gene: String
  chromosome: String
  exon: Int
  position: Int
  reference: String
  alternative: String
  transcript_id: String
  transcript_hgvs: String
  genomic_hgvs: String
  oncomine_variant_class: String
  variant_classification: String
  amino_acid_change: String
  variant_reports: [variant_report] @relation(name:"indel_variant_of", direction:OUT)
}

type indel_variant_of {
  allele_frequency: Float
}

type metastatic_site {
  met_site_id: String
  metastatic_site_name: String
  cases: [case] @relation(name:"met_site_of", direction:OUT)
}

type nucleic_acid {
  aliquot_id: String
  nucleic_acid_concentration: Float
  nucleic_acid_volume: Float
  nucleic_acid_type: String
  specimen: specimen @relation(name:"of_specimen", direction:OUT)
  sequencing_assays: [sequencing_assay] @relation(name:"of_nucleic_acid", direction:IN)
}

type sequencing_assay {
  qc_result: String
  experimental_method: String
  platform: String
  nucleic_acid: nucleic_acid @relation(name:"of_nucleic_acid", direction:OUT)
  files: [file] @relation(name:"of_sequencing_assay", direction:IN)
  variant_reports: [variant_report] @relation(name:"of_sequencing_assay", direction:IN)
}

type snv_variant {
  variant_id: String
  external_variant_id: String
  gene: String
  chromosome: String
  exon: Int
  position: Int
  reference: String
  alternative: String
  transcript_id: String
  transcript_hgvs: String
  genomic_hgvs: String
  oncomine_variant_class: String
  variant_classification: String
  amino_acid_change: String
  variant_reports: [variant_report] @relation(name:"snv_variant_of", direction:OUT)
}

type snv_variant_of {
  allele_frequency: Float
}

type specimen {
  specimen_id: String
  specimen_type: String
  case: case @relation(name:"of_case", direction:OUT)
  ihc_assay_reports: [ihc_assay_report] @relation(name:"of_specimen", direction:IN)
  nucleic_acids: [nucleic_acid] @relation(name:"of_specimen", direction:IN)
  assignment_reports: [assignment_report] @relation(name:"of_specimen", direction:IN)
}

type variant_report {
  variant_report_id: String
  mapd: Float
  cellularity: Float
  torrent_variant_caller_version: String
  reference_genome: String
  sequencing_assay: sequencing_assay @relation(name:"of_sequencing_assay", direction:OUT)
  snv_variants: [snv_variant] @relation(name:"snv_variant_of", direction:IN)
  delins_variants: [delins_variant] @relation(name:"delins_variant_of", direction:IN)
  indel_variants: [indel_variant] @relation(name:"indel_variant_of", direction:IN)
  copy_number_variants: [copy_number_variant] @relation(name:"copy_number_variant_of", direction:IN)
  gene_fusion_variants: [gene_fusion_variant] @relation(name:"gene_fusion_variant_of", direction:IN)
  assignment_reports: [assignment_report] @relation(name:"of_variant_report", direction:IN)
}

schema {
  query: QueryType
}

type ArmInfo {
  arms: String
  caseSize: Int
}

type FileUuid{
  uuid: String
}

type GroupCount{
  group: String
  count: Int
}

type CaseDetail{
  case_id: String,
  clinical_trial_code: String,
  clinical_trial_id: String,
  disease: String,
  gender: String,
  race: String,
  arm_id: String,
  arm_target: String,
  arm_drug: String,
  ethnicity: String,
  files: [String]
}

type ClinicalTrialInfo{
  clinical_trial_id: String,
  clinical_trial_short_name: String,
  clinical_trial_description: String,
  clinical_trial_designation: String,
  clinical_trial_long_name: String,
  clinical_trial_type: String,
  lead_organization: String,
  principal_investigators: String,
  number_of_arms: Int,
  number_of_cases: Int
}

type ClinicalTrialArm{
  arm_id: String,
  arm_target: String,
  arm_drug: String,
  pubmed_id: String,
  number_of_cases: Int
}

# ---Queries---

type QueryType {

  # ---Schema Version---

  schemaVersion: String @cypher(statement: """
    RETURN '0.2.2'
  """)

  caseDetailByCaseId(case_id: String!): CaseDetail @cypher(statement: """
    MATCH (c:case)
      WHERE c.case_id = $case_id
    OPTIONAL MATCH (f:file)-[*]->(c)-[:of_arm]->(a:arm)-[:of_trial]->(ct:clinical_trial)
    RETURN{
      case_id: c.case_id,
      clinical_trial_code: ct.clinical_trial_designation,
      clinical_trial_id: ct.clinical_trial_id,
      disease: c.disease,
      gender: c.gender,
      race: c.race,
      arm_id: a.arm_id,
      arm_target: a.arm_target,
      arm_drug: a.arm_drug,
      ethnicity: c.ethnicity,
      files: COLLECT(DISTINCT f.uuid)
    }
  """, passThrough: true)

  clinicalTrials: [ClinicalTrialInfo] @cypher(statement: """
    MATCH (ct:clinical_trial)
    OPTIONAL MATCH (c:case)-[:of_arm]->(a:arm)-[:of_trial]->(ct)
    RETURN{
      clinical_trial_id: ct.clinical_trial_id,
      clinical_trial_short_name: ct.clinical_trial_short_name,
      clinical_trial_description: ct.clinical_trial_description,
      clinical_trial_designation: ct.clinical_trial_designation,
      clinical_trial_long_name: ct.clinical_trial_long_name,
      clinical_trial_type: ct.clinical_trial_type,
      lead_organization: ct.lead_organization,
      principal_investigators: ct.principal_investigators,
      number_of_arms: COUNT(DISTINCT a),
      number_of_cases: COUNT(DISTINCT c)
    }
  """, passThrough: true)

  clinicalTrialByTrialId(trial_id: String!): ClinicalTrialInfo @cypher(statement: """
    MATCH (ct:clinical_trial)
      WHERE ct.clinical_trial_id = $trial_id
    OPTIONAL MATCH (c:case)-[:of_arm]->(a:arm)-[:of_trial]->(ct)
    RETURN{
      clinical_trial_id: ct.clinical_trial_id,
      clinical_trial_short_name: ct.clinical_trial_short_name,
      clinical_trial_description: ct.clinical_trial_description,
      clinical_trial_designation: ct.clinical_trial_designation,
      clinical_trial_long_name: ct.clinical_trial_long_name,
      clinical_trial_type: ct.clinical_trial_type,
      lead_organization: ct.lead_organization,
      principal_investigators: ct.principal_investigators,
      number_of_arms: COUNT(DISTINCT a),
      number_of_cases: COUNT(DISTINCT c)
    }
  """, passThrough: true)

  fileCountByTrialId(trial_id: String!): Int @cypher(statement: """
    MATCH (ct:clinical_trial)
      WHERE ct.clinical_trial_id = $trial_id
    OPTIONAL MATCH (f:file)-[*]->(ct)
    RETURN COUNT(DISTINCT f)
  """)

  clinicalTrialArmByTrialId(trial_id: String!): [ClinicalTrialArm] @cypher(statement: """
    MATCH (ct:clinical_trial)
      WHERE ct.clinical_trial_id = $trial_id
    OPTIONAL MATCH (c:case)-[:of_arm]->(a:arm)-[:of_trial]->(ct)
    RETURN{
      arm_id: a.arm_id,
      arm_target: a.arm_target,
      arm_drug: a.arm_drug,
      pubmed_id: a.pubmed_id,
      number_of_cases: COUNT(DISTINCT c)
    }
  """, passThrough: true)

} 