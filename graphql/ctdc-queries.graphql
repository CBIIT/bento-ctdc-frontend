schema {
  query: QueryType
}

type ArmInfo {
  arms: String
  caseSize: Int
}

type FileUuid{
  uuid: String
}

type GroupCount{
  group: String
  count: Int
}

type CaseDetail{
  case_id: String,
  clinical_trial_code: String,
  clinical_trial_id: String,
  disease: String,
  gender: String,
  race: String,
  arm_id: String,
  arm_target: String,
  arm_drug: String,
  ethnicity: String,
  files: [String]
}

type ClinicalTrialInfo{
  clinical_trial_id: String,
  clinical_trial_short_name: String,
  clinical_trial_description: String,
  clinical_trial_designation: String,
  clinical_trial_long_name: String,
  clinical_trial_type: String,
  lead_organization: String,
  principal_investigators: String,
  number_of_arms: Int,
  numberOfCases: Int
}

type ClinicalTrialArm{
  arm_id: String,
  arm_target: String,
  arm_drug: String,
  pubmed_id: String,
  numberOfCases: Int
}

# ---Queries---

type QueryType {

  # ---Schema Version---

  schemaVersion: String @cypher(statement: """
    RETURN '1.0.0'
  """)

  caseDetailByCaseId(case_id: String!): CaseDetail @cypher(statement: """
    MATCH (c:case)
      WHERE c.case_id = $case_id
    OPTIONAL MATCH (f:file)-[*]->(c)-[:of_arm]->(a:arm)-[:of_trial]->(ct:clinical_trial)
    RETURN{
      case_id: c.case_id,
      clinical_trial_code: ct.clinical_trial_designation,
      clinical_trial_id: ct.clinical_trial_id,
      disease: c.disease,
      gender: c.gender,
      race: c.race,
      arm_id: a.arm_id,
      arm_target: a.arm_target,
      arm_drug: a.arm_drug,
      ethnicity: c.ethnicity,
      files: COLLECT(DISTINCT f.uuid)
    }
  """, passThrough: true)

  clinicalTrials: [ClinicalTrialInfo] @cypher(statement: """
    MATCH (ct:clinical_trial)
    OPTIONAL MATCH (c:case)-[:of_arm]->(a:arm)-[:of_trial]->(ct)
    RETURN{
      clinical_trial_id: ct.clinical_trial_id,
      clinical_trial_short_name: ct.clinical_trial_short_name,
      clinical_trial_description: ct.clinical_trial_description,
      clinical_trial_designation: ct.clinical_trial_designation,
      clinical_trial_long_name: ct.clinical_trial_long_name,
      clinical_trial_type: ct.clinical_trial_type,
      lead_organization: ct.lead_organization,
      principal_investigators: ct.principal_investigators,
      number_of_arms: COUNT(DISTINCT a),
      numberOfCases: COUNT(DISTINCT c)
    }
  """, passThrough: true)

  clinicalTrialByTrialId(trial_id: String!): ClinicalTrialInfo @cypher(statement: """
    MATCH (ct:clinical_trial)
      WHERE ct.clinical_trial_id = $trial_id
    OPTIONAL MATCH (c:case)-[:of_arm]->(a:arm)-[:of_trial]->(ct)
    RETURN{
      clinical_trial_id: ct.clinical_trial_id,
      clinical_trial_short_name: ct.clinical_trial_short_name,
      clinical_trial_description: ct.clinical_trial_description,
      clinical_trial_designation: ct.clinical_trial_designation,
      clinical_trial_long_name: ct.clinical_trial_long_name,
      clinical_trial_type: ct.clinical_trial_type,
      lead_organization: ct.lead_organization,
      principal_investigators: ct.principal_investigators,
      number_of_arms: COUNT(DISTINCT a),
      numberOfCases: COUNT(DISTINCT c)
    }
  """, passThrough: true)

  fileCountByTrialId(trial_id: String!): Int @cypher(statement: """
    MATCH (ct:clinical_trial)
      WHERE ct.clinical_trial_id = $trial_id
    OPTIONAL MATCH (f:file)-[*]->(ct)
    RETURN COUNT(DISTINCT f)
  """)

  clinicalTrialArmByTrialId(trial_id: String!): [ClinicalTrialArm] @cypher(statement: """
    MATCH (ct:clinical_trial)
      WHERE ct.clinical_trial_id = $trial_id
    OPTIONAL MATCH (c:case)-[:of_arm]->(a:arm)-[:of_trial]->(ct)
    RETURN{
      arm_id: a.arm_id,
      arm_target: a.arm_target,
      arm_drug: a.arm_drug,
      pubmed_id: a.pubmed_id,
      numberOfCases: COUNT(DISTINCT c)
    }
  """, passThrough: true)

} 